require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/transfers", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Transfer. As you add validations to Transfer, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) {
    {transferor_id: 1, transferee_id: 2, amount: 50, execution_date: "2021-09-01"}
  }

  let(:invalid_attributes) {
    {transferor_id: 1, transferee_id: 2, amount: 1000000, execution_date: "2021-09-01"}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TransfersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "POST " do
    context "with valid parameters" do
      it "transfers founds from an account to another and adds 2 new transactions" do
        expect {
          post transfers_url,
               params: valid_attributes, headers: valid_headers, as: :json
        }.to change(AccountTransaction, :count).by(2)
      end

    end

    context "with invalid parameters" do
      it "fails to transfers founds from an account to another and doesnt add transactions" do
        expect {
          post transfers_url,
               params: invalid_attributes, as: :json
        }.to change(AccountTransaction, :count).by(0)
      end

    end
  end

end
